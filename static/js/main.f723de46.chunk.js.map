{"version":3,"sources":["components/button.js","container/keys.js","actions/index.js","constants/index.js","components/result.js","container/result.js","App.js","serviceWorker.js","reducers/result.js","reducers/index.js","index.js"],"names":["Button","onInputNumber","value","_this","props","onInput","_this2","this","_this$props","name","className_button","className_div","react_default","a","createElement","className","onClick","Component","KeysContainer","react","components_button","connect","dispatch","type","actions","Result","children","ResultContainer","result","components_result","state","App","container_result","keys","Boolean","window","location","hostname","match","calculation","value_1","value_2","myReducer","arguments","length","undefined","action","toString","Number","myReducers","combineReducers","myStore","createStore","__REDUX_DEVTOOLS_EXTENSION","__REDUX_DEVTOOLS_EXTENSION_","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f723de46.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n    render() {\r\n\r\n        const { name, className_button, className_div } = this.props;\r\n\r\n        return (\r\n            <div className={className_div}>\r\n                <button className={className_button} onClick={() => this.onInputNumber(name)}>{name}</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onInputNumber = (value) => {\r\n        this.props.onInput(value);\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Button from './../components/button';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass KeysContainer extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"item-keys\">\r\n                    <div className=\"item-key\">\r\n                        <Button onInput={this.onInput} name=\"A/C\" />\r\n                        <Button onInput={this.onInput} name=\"+/-\" />\r\n                        <Button onInput={this.onInput} name=\"%\" />\r\n                        <Button onInput={this.onInput} className_button=\"item-operation\" name=\"/\" />\r\n                    </div>\r\n                    <div className=\"item-key\">\r\n                        <Button onInput={this.onInput} name={7} />\r\n                        <Button onInput={this.onInput} name={8} />\r\n                        <Button onInput={this.onInput} name={9} />\r\n                        <Button onInput={this.onInput} className_button=\"item-operation\" name=\"X\" />\r\n                    </div>\r\n                    <div className=\"item-key\">\r\n                        <Button onInput={this.onInput} name={4} />\r\n                        <Button onInput={this.onInput} name={5} />\r\n                        <Button onInput={this.onInput} name={6} />\r\n                        <Button onInput={this.onInput} className_button=\"item-operation\" name=\"-\" />\r\n                    </div>\r\n                    <div className=\"item-key\">\r\n                        <Button onInput={this.onInput} name={1} />\r\n                        <Button onInput={this.onInput} name={2} />\r\n                        <Button onInput={this.onInput} name={3} />\r\n                        <Button onInput={this.onInput} className_button=\"item-operation\" name=\"+\" />\r\n                    </div>\r\n                    <div className=\"item-key\">\r\n                        <Button onInput={this.onInput} className_div=\"wide-75\" name={0} />\r\n                        <Button onInput={this.onInput} className_button=\"item-operation\" name=\"=\" />\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    onInput = (value) => {\r\n        this.props.onInput(value);\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onInput: (value) => {\r\n            dispatch(actions.input(value))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(KeysContainer);\r\n","import * as actionsType from './../constants/index';\r\nexport const input = (value) => ({type: actionsType.INPUT, value })\r\n","export const INPUT_MULTIPLICATION = \"X\";\r\nexport const INPUT_DIVISION = \"/\";\r\nexport const INPUT_SUBTRACTION = \"-\";\r\nexport const INPUT_SUMMATION = \"+\";\r\nexport const INPUT = \"INPUT\";\r\nexport const INPUT_DOT = \".\";\r\nexport const AC = \"A/C\";\r\nexport const CALCULATOR = \"=\";\r\nexport const INPUT_PERCENT = \"%\";\r\nexport const INPUT_SUBTRACTION_SYMBOL = \"+/-\";\r\n","import React, { Component, Fragment } from 'react';\r\n\r\nclass Result extends Component {\r\n    render() {\r\n\r\n        const { children } = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"item-result\">{children}</div>    \r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Result from './../components/result';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ResultContainer extends Component {\r\n    render() {\r\n        const { result } = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Result>{ result }</Result>    \r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nResultContainer.propTypes = {\r\n    result: PropTypes.number\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return ({\r\n        result: state.result\r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ResultContainer);\r\n","import React, { Component } from 'react';\nimport KeysContainer from './container/keys';\nimport ResultContainer from './container/result';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <ResultContainer />\n                <KeysContainer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionsType from './../constants/index';\r\n\r\nconst initialResult = 0;\r\n\r\nlet calculation = '';\r\nlet value_1 = 0;\r\nlet value_2 = 0;\r\n\r\nconst myReducer = (state = initialResult, action) => {\r\n\r\n    if (typeof action.value === 'number') {\r\n        const convertNumberToString = action.value.toString();\r\n        state += convertNumberToString;\r\n        if (calculation) {\r\n            state = 0;\r\n            const convertNumberToString = action.value.toString();\r\n            state += convertNumberToString;\r\n        }\r\n        if (calculation && value_1) {\r\n            value_2 = Number(state);\r\n        } else {\r\n            value_1 = Number(state);\r\n        }\r\n        return Number(state);\r\n    } else if (action.value === actionsType.AC) {\r\n        return 0;\r\n    } else if (action.value === actionsType.INPUT_SUBTRACTION_SYMBOL) {\r\n        return -state;\r\n    } else if (action.value === actionsType.INPUT_PERCENT) {\r\n        return state/100;\r\n    } else if (action.value === actionsType.INPUT_DIVISION && state) {\r\n        calculation = actionsType.INPUT_DIVISION;\r\n    } else if (action.value === actionsType.INPUT_MULTIPLICATION && state) {\r\n        calculation = actionsType.INPUT_MULTIPLICATION;\r\n    } else if (action.value === actionsType.INPUT_SUBTRACTION && state) {\r\n        calculation = actionsType.INPUT_SUBTRACTION;\r\n    } else if (action.value === actionsType.INPUT_SUMMATION && state) {\r\n        calculation = actionsType.INPUT_SUMMATION;\r\n    } else if (action.value === actionsType.CALCULATOR) {\r\n        if (calculation === actionsType.INPUT_DIVISION) {\r\n            return value_1/value_2;\r\n        }\r\n        if (calculation === actionsType.INPUT_MULTIPLICATION) {\r\n            return value_1*value_2;\r\n        }\r\n        if (calculation === actionsType.INPUT_SUMMATION) {\r\n            return value_1+value_2;\r\n        }\r\n        if (calculation === actionsType.INPUT_SUBTRACTION) {\r\n            return value_1-value_2;\r\n        }\r\n    }\r\n\r\n    return state;\r\n\r\n}\r\n\r\nexport default myReducer;\r\n","import { combineReducers } from 'redux';\r\nimport result from './result';\r\n\r\nconst myReducers = combineReducers({\r\n    result\r\n});\r\n\r\nexport default myReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport myReducer from './reducers/index';\n\nconst myStore = createStore(\n    myReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION && window.__REDUX_DEVTOOLS_EXTENSION_()\n)\n\nReactDOM.render(\n    <Provider store={myStore}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}